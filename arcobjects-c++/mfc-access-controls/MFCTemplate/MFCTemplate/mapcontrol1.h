#pragma once

// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CMapcontrol1 wrapper class

class CMapcontrol1 : public CWnd
{
protected:
	DECLARE_DYNCREATE(CMapcontrol1)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0xC552EA94, 0x6FBB, 0x11D5, { 0xA9, 0xC1, 0x0, 0x10, 0x4B, 0xB6, 0xFC, 0x1C } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName, LPCTSTR lpszWindowName, DWORD dwStyle,
						const RECT& rect, CWnd* pParentWnd, UINT nID, 
						CCreateContext* pContext = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); 
	}

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, 
				UINT nID, CFile* pPersist = NULL, BOOL bStorage = FALSE,
				BSTR bstrLicKey = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); 
	}

// Attributes
public:
enum
{
    esriPointerParentWindow = -1,
    esriPointerDefault = 0,
    esriPointerArrow = 1,
    esriPointerCrosshair = 2,
    esriPointerIBeam = 3,
    esriPointerIcon = 4,
    esriPointerSize = 5,
    esriPointerSizeNESW = 6,
    esriPointerSizeNS = 7,
    esriPointerSizeNWSE = 8,
    esriPointerSizeWE = 9,
    esriPointerUpArrow = 10,
    esriPointerHourglass = 11,
    esriPointerNoDrop = 12,
    esriPointerArrowHourglass = 13,
    esriPointerArrowQuestion = 14,
    esriPointerSizeAll = 15,
    esriPointerZoom = 50,
    esriPointerZoomIn = 51,
    esriPointerZoomOut = 52,
    esriPointerPan = 53,
    esriPointerPanning = 54,
    esriPointerIdentify = 55,
    esriPointerLabel = 56,
    esriPointerHotLink = 57,
    esriPointerPencil = 58,
    esriPointerHand = 59,
    esriPointerPageZoomIn = 60,
    esriPointerPageZoomOut = 61,
    esriPointerPagePan = 62,
    esriPointerPagePanning = 63,
    esriPointerCustom = 99
}esriControlsMousePointer;
enum
{
    esriDragDropNone = 0,
    esriDragDropCopy = 1,
    esriDragDropMove = 2,
    esriDragDropLink = 4
}esriControlsDragDropEffect;
enum
{
    esriDropEnter = 0,
    esriDropOver = 1,
    esriDropLeave = 2,
    esriDropped = 3
}esriControlsDropAction;
enum
{
    esriFlat = 0,
    esri3D = 1
}esriControlsAppearance;
enum
{
    esriNoBorder = 0,
    esriBorder = 1
}esriControlsBorderStyle;
enum
{
    esriTOCControlAutomatic = 0,
    esriTOCControlManual = 1
}esriTOCControlEdit;
enum
{
    esriTOCControlItemNone = 0,
    esriTOCControlItemMap = 1,
    esriTOCControlItemLayer = 2,
    esriTOCControlItemHeading = 3,
    esriTOCControlItemLegendClass = 4
}esriTOCControlItem;
enum
{
    esriTextAlongSide = 0,
    esriTextBelow = 1
}esriToolbarTextAlignment;
enum
{
    esriToolbarOrientationHorizontal = 0,
    esriToolbarOrientationVertical = 1
}esriToolbarOrientation;
enum
{
    esriToolbarFillHorizontal = 0,
    esriToolbarFillVertical = 1
}esriToolbarFillDirection;
enum
{
    esriToolbarItemUnknown = 0,
    esriToolbarItemCommand = 1,
    esriToolbarItemTool = 2,
    esriToolbarItemToolControl = 3,
    esriToolbarItemMenu = 4,
    esriToolbarItemPalette = 5,
    esriToolbarItemMultiItem = 6
}esriToolbarItemType;
enum
{
    esriLicenseStatusAll = 0,
    esriLicenseStatusRequested = 1
}esriLicenseStatusOptions;
enum
{
    esriStyleClassReferenceSystems = 0,
    esriStyleClassMaplexLabels = 1,
    esriStyleClassShadows = 2,
    esriStyleClassAreaPatches = 3,
    esriStyleClassLinePatches = 4,
    esriStyleClassLabels = 5,
    esriStyleClassNorthArrows = 6,
    esriStyleClassScaleBars = 7,
    esriStyleClassLegendItems = 8,
    esriStyleClassScaleTexts = 9,
    esriStyleClassColorRamps = 10,
    esriStyleClassBorders = 11,
    esriStyleClassBackgrounds = 12,
    esriStyleClassColors = 13,
    esriStyleClassVectorizationSettings = 14,
    esriStyleClassFillSymbols = 15,
    esriStyleClassLineSymbols = 16,
    esriStyleClassMarkerSymbols = 17,
    esriStyleClassTextSymbols = 18,
    esriStyleClassHatches = 19,
    esriStyleClassRepresentationMarkers = 20,
    esriStyleClassRepresentationRules = 21
}esriSymbologyStyleClass;
enum
{
    esriDisplayStyleIcon = 0,
    esriDisplayStyleReport = 1,
    esriDisplayStyleSmallIcon = 2,
    esriDisplayStyleList = 3
}esriSymbologyDisplayStyle;
enum
{
    esriSortDirectionNone = 0,
    esriSortDirectionAscending = 1,
    esriSortDirectionDescending = 2
}esriSymbologySortDirection;
enum
{
    esriSnappingTypeNone = 0,
    esriSnappingTypePoint = 1,
    esriSnappingTypeEndpoint = 2,
    esriSnappingTypeVertex = 4,
    esriSnappingTypeEdge = 8,
    esriSnappingTypeMidpoint = 16,
    esriSnappingTypeIntersection = 32,
    esriSnappingTypeTangent = 64
}esriSnappingType;
enum
{
    esriSnappingTipLayerName = 1,
    esriSnappingTipSnappingType = 2
}esriSnappingTipType;
enum
{
    esriEngineStateNotEditing = 0,
    esriEngineStateEditing = 1,
    esriEngineStateEditingUnfocused = 2
}esriEngineEditState;
enum
{
    esriEngineDURadians = 9101,
    esriEngineDUDecimalDegrees = 2,
    esriEngineDUDegreesMinutesSeconds = 3,
    esriEngineDUGradians = 9105,
    esriEngineDUGons = 9106
}esriEngineDirectionUnits;
enum
{
    esriEngineDTNorthAzimuth = 1,
    esriEngineDTSouthAzimuth = 2,
    esriEngineDTPolar = 3,
    esriEngineDTQuadrantBearing = 4
}esriEngineDirectionType;
enum
{
    esriEngineSnapTolerancePixels = 0,
    esriEngineSnapToleranceMapUnits = 1
}esriEngineSnapToleranceUnits;
enum
{
    esriEngineSketchOperationGeneral = 0,
    esriEngineSketchOperationVertexAdded = 1,
    esriEngineSketchOperationVertexDeleted = 2,
    esriEngineSketchOperationVertexMoved = 3
}esriEngineSketchOperationType;
enum
{
    esriEngineEditSessionModeVersioned = 0,
    esriEngineEditSessionModeNonVersioned = 1
}esriEngineEditSessionMode;
enum
{
    esriEngineNAMessageTypeNone = 0,
    esriEngineNAMessageTypeInformative = 1,
    esriEngineNAMessageTypeWarning = 2,
    esriEngineNAMessageTypeError = 4
}esriEngineNAMessageType;
enum
{
    esriHHEHookHelperHookReplaced = 0,
    esriHHEActiveViewFocusMapChanged = 1,
    esriHHEArcReaderControlCurrentViewChanged = 2,
    esriHHEArcReaderControlDocumentLoaded = 3,
    esriHHEArcReaderControlDocumentUnloaded = 4,
    esriHHEArcReaderControlFocusARMapChanged = 5,
    esriHHEMapControlMapReplaced = 6,
    esriHHEPageLayoutControlPageLayoutReplaced = 7,
    esriHHEPageLayoutControlFocusMapChanged = 8,
    esriHHEDocumentActiveViewChanged = 9,
    esriHHEDocumentMapsChanged = 10,
    esriHHEDocumentNewDocument = 11,
    esriHHEDocumentOpenDocument = 12,
    esriHHEDocumentCloseDocument = 13,
    esriHHEToolbarControlBuddyChanged = 14,
    esriHHEGlobeControlGlobeReplaced = 15,
    esriHHESceneControlSceneReplaced = 16
}esriHookHelperEvents;
enum
{
    esriHookActionsFlash = 0,
    esriHookActionsPan = 1,
    esriHookActionsZoom = 2,
    esriHookActionsGraphic = 3,
    esriHookActionsLabel = 4,
    esriHookActionsCallout = 5
}esriHookActions;
enum
{
    esriEngineInkGestureDownLeft = 0,
    esriEngineInkGestureRightUp = 1,
    esriEngineInkGestureScratchout = 2,
    esriEngineInkGestureChevronLeft = 3,
    esriEngineInkGestureChevronRight = 4,
    esriEngineInkGestureChevronUp = 5,
    esriEngineInkGestureChevronDown = 6,
    esriEngineInkGestureSemiCircleLeft = 7,
    esriEngineInkGestureSemiCircleRight = 8,
    esriEngineInkGestureArrowLeft = 9,
    esriEngineInkGestureArrowRight = 10,
    esriEngineInkGestureArrowUp = 11,
    esriEngineInkGestureArrowDown = 12
}esriEngineInkGesture;
enum
{
    esriEngineInkCollectionModeNotCollecting = 0,
    esriEngineInkCollectionModeGesturesOnly = 1,
    esriEngineInkCollectionModeInkAndGestures = 2
}esriEngineInkCollectionMode;
enum
{
    esriEngineInkToolCommitTypeManual = 0,
    esriEngineInkToolCommitTypeAutoGraphic = 1,
    esriEngineInkToolCommitTypeAutoText = 2
}esriEngineInkToolCommitType;


// Operations
public:

// IMapControlDefault

// Functions
//

	long get_hWnd()
	{
		long result;
		InvokeHelper(DISPID_HWND, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_BackColor(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(DISPID_BACKCOLOR, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_BackColor()
	{
		long result;
		InvokeHelper(DISPID_BACKCOLOR, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_MousePointer(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xfffffdf7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_MousePointer()
	{
		long result;
		InvokeHelper(0xfffffdf7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void putref_MouseIcon(LPDISPATCH newValue)
	{
		static BYTE parms[] = VTS_DISPATCH ;
		InvokeHelper(0xfffffdf6, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, parms, newValue);
	}
	LPDISPATCH get_MouseIcon()
	{
		LPDISPATCH result;
		InvokeHelper(0xfffffdf6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	void put_BorderStyle(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(DISPID_BORDERSTYLE, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_BorderStyle()
	{
		long result;
		InvokeHelper(DISPID_BORDERSTYLE, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_Enabled(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(DISPID_ENABLED, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_Enabled()
	{
		BOOL result;
		InvokeHelper(DISPID_ENABLED, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_Appearance(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(DISPID_APPEARANCE, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_Appearance()
	{
		long result;
		InvokeHelper(DISPID_APPEARANCE, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void AboutBox()
	{
		InvokeHelper(DISPID_ABOUTBOX, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void putref_Map(LPUNKNOWN newValue)
	{
		static BYTE parms[] = VTS_UNKNOWN ;
		InvokeHelper(0x1, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, parms, newValue);
	}
	LPUNKNOWN get_Map()
	{
		LPUNKNOWN result;
		InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	LPUNKNOWN get_ActiveView()
	{
		LPUNKNOWN result;
		InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	long get_LayerCount()
	{
		long result;
		InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPUNKNOWN get_Layer(long index)
	{
		LPUNKNOWN result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, parms, index);
		return result;
	}
	LPUNKNOWN get_Extent()
	{
		LPUNKNOWN result;
		InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	void put_Extent(LPUNKNOWN newValue)
	{
		static BYTE parms[] = VTS_UNKNOWN ;
		InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	LPUNKNOWN get_FullExtent()
	{
		LPUNKNOWN result;
		InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	void put_FullExtent(LPUNKNOWN newValue)
	{
		static BYTE parms[] = VTS_UNKNOWN ;
		InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_ShowScrollbars()
	{
		BOOL result;
		InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_ShowScrollbars(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	void put_VisibleRegion(LPUNKNOWN newValue)
	{
		static BYTE parms[] = VTS_UNKNOWN ;
		InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	LPUNKNOWN get_SpatialReference()
	{
		LPUNKNOWN result;
		InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	void putref_SpatialReference(LPUNKNOWN newValue)
	{
		static BYTE parms[] = VTS_UNKNOWN ;
		InvokeHelper(0x9, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, parms, newValue);
	}
	double get_ReferenceScale()
	{
		double result;
		InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_ReferenceScale(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_MapScale()
	{
		double result;
		InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	void put_MapScale(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	LPUNKNOWN get_CurrentTool()
	{
		LPUNKNOWN result;
		InvokeHelper(0xe, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	void putref_CurrentTool(LPUNKNOWN newValue)
	{
		static BYTE parms[] = VTS_UNKNOWN ;
		InvokeHelper(0xe, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, parms, newValue);
	}
	void AddLayer(LPUNKNOWN Layer, long toIndex)
	{
		static BYTE parms[] = VTS_UNKNOWN VTS_I4 ;
		InvokeHelper(0xf, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Layer, toIndex);
	}
	void AddLayerFromFile(LPCTSTR lyrPath, long toIndex)
	{
		static BYTE parms[] = VTS_BSTR VTS_I4 ;
		InvokeHelper(0x10, DISPATCH_METHOD, VT_EMPTY, NULL, parms, lyrPath, toIndex);
	}
	void ClearLayers()
	{
		InvokeHelper(0x11, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void DeleteLayer(long index)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x12, DISPATCH_METHOD, VT_EMPTY, NULL, parms, index);
	}
	void MoveLayerTo(long fromIndex, long toIndex)
	{
		static BYTE parms[] = VTS_I4 VTS_I4 ;
		InvokeHelper(0x13, DISPATCH_METHOD, VT_EMPTY, NULL, parms, fromIndex, toIndex);
	}
	void LoadMxFile(LPCTSTR mxPath, VARIANT mapNameOrIndex, VARIANT password)
	{
		static BYTE parms[] = VTS_BSTR VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x14, DISPATCH_METHOD, VT_EMPTY, NULL, parms, mxPath, &mapNameOrIndex, &password);
	}
	void Refresh(long phase, VARIANT layerOrElement, VARIANT envelope)
	{
		static BYTE parms[] = VTS_I4 VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x15, DISPATCH_METHOD, VT_EMPTY, NULL, parms, phase, &layerOrElement, &envelope);
	}
	void Pan()
	{
		InvokeHelper(0x16, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void CenterAt(LPUNKNOWN centerPoint)
	{
		static BYTE parms[] = VTS_UNKNOWN ;
		InvokeHelper(0x17, DISPATCH_METHOD, VT_EMPTY, NULL, parms, centerPoint);
	}
	LPUNKNOWN TrackRectangle()
	{
		LPUNKNOWN result;
		InvokeHelper(0x18, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	LPUNKNOWN TrackPolygon()
	{
		LPUNKNOWN result;
		InvokeHelper(0x19, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	LPUNKNOWN TrackLine()
	{
		LPUNKNOWN result;
		InvokeHelper(0x1a, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	LPUNKNOWN TrackCircle()
	{
		LPUNKNOWN result;
		InvokeHelper(0x1b, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	void DrawShape(LPUNKNOWN Shape, VARIANT * symbol)
	{
		static BYTE parms[] = VTS_UNKNOWN VTS_PVARIANT ;
		InvokeHelper(0x1c, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Shape, symbol);
	}
	void FlashShape(LPUNKNOWN pShape, long nFlashes, long flashInterval, VARIANT symbol)
	{
		static BYTE parms[] = VTS_UNKNOWN VTS_I4 VTS_I4 VTS_VARIANT ;
		InvokeHelper(0x1d, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pShape, nFlashes, flashInterval, &symbol);
	}
	void FromMapPoint(LPUNKNOWN pt, long * X, long * Y)
	{
		static BYTE parms[] = VTS_UNKNOWN VTS_PI4 VTS_PI4 ;
		InvokeHelper(0x1e, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pt, X, Y);
	}
	LPUNKNOWN ToMapPoint(long X, long Y)
	{
		LPUNKNOWN result;
		static BYTE parms[] = VTS_I4 VTS_I4 ;
		InvokeHelper(0x1f, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, parms, X, Y);
		return result;
	}
	void AddShapeFile(LPCTSTR Path, LPCTSTR fileName)
	{
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x20, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Path, fileName);
	}
	void DrawText(LPUNKNOWN pGeometry, LPCTSTR text, VARIANT * pSymbol)
	{
		static BYTE parms[] = VTS_UNKNOWN VTS_BSTR VTS_PVARIANT ;
		InvokeHelper(0x21, DISPATCH_METHOD, VT_EMPTY, NULL, parms, pGeometry, text, pSymbol);
	}
	BOOL CheckMxFile(LPCTSTR fileName)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x22, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, fileName);
		return result;
	}
	LPUNKNOWN ReadMxMaps(LPCTSTR fileName, VARIANT password)
	{
		LPUNKNOWN result;
		static BYTE parms[] = VTS_BSTR VTS_VARIANT ;
		InvokeHelper(0x23, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, parms, fileName, &password);
		return result;
	}
	void put_OleDropEnabled(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x25, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_OleDropEnabled()
	{
		BOOL result;
		InvokeHelper(0x25, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_Rotation(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0x26, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	double get_Rotation()
	{
		double result;
		InvokeHelper(0x26, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
		return result;
	}
	long get_MapUnits()
	{
		long result;
		InvokeHelper(0x27, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_MapUnits(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x27, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	LPUNKNOWN get_TrackCancel()
	{
		LPUNKNOWN result;
		InvokeHelper(0x28, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	void putref_TrackCancel(LPUNKNOWN newValue)
	{
		static BYTE parms[] = VTS_UNKNOWN ;
		InvokeHelper(0x28, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT get_CustomProperty()
	{
		VARIANT result;
		InvokeHelper(0x29, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void put_CustomProperty(VARIANT newValue)
	{
		static BYTE parms[] = VTS_VARIANT ;
		InvokeHelper(0x29, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, &newValue);
	}
	void SuppressResizeDrawing(BOOL suppressResize, long resizeHWnd)
	{
		static BYTE parms[] = VTS_BOOL VTS_I4 ;
		InvokeHelper(0x2a, DISPATCH_METHOD, VT_EMPTY, NULL, parms, suppressResize, resizeHWnd);
	}
	CString get_DocumentFilename()
	{
		CString result;
		InvokeHelper(0x2b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_DocumentFilename(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x2b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_DocumentMap()
	{
		CString result;
		InvokeHelper(0x2c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_DocumentMap(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x2c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	LPDISPATCH get_Object()
	{
		LPDISPATCH result;
		InvokeHelper(0x2d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	void put_ShowMapTips(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x2e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_ShowMapTips()
	{
		BOOL result;
		InvokeHelper(0x2e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_TipStyle(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x2f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_TipStyle()
	{
		long result;
		InvokeHelper(0x2f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_TipDelay(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x30, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_TipDelay()
	{
		long result;
		InvokeHelper(0x30, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	long get_KeyIntercept()
	{
		long result;
		InvokeHelper(0x31, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_KeyIntercept(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x31, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_AutoMouseWheel()
	{
		BOOL result;
		InvokeHelper(0x32, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_AutoMouseWheel(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x32, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_AutoKeyboardScrolling()
	{
		BOOL result;
		InvokeHelper(0x33, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_AutoKeyboardScrolling(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x33, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}

// Properties
//



};
